/*给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据保证，新值和原始二叉搜索树中的任意节点值都不同。注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。?例如,?给定二叉搜索树:        4       / \      2   7     / \    1   3和 插入的值: 5你可以返回这个二叉搜索树:         4       /   \      2     7     / \   /    1   3 5或者这个树也是有效的:         5       /   \      2     7     / \       1   3         \          4?提示：给定的树上的节点数介于 0 和 10^4 之间每个节点都有一个唯一整数值，取值范围从 0 到 10^8-10^8 <= val <= 10^8新值和原始二叉搜索树中的任意节点值都不同来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/insert-into-a-binary-search-tree著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*//** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode() : val(0), left(nullptr), right(nullptr) {} *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */class Solution {public:    void dfs(TreeNode* root,int val){        if(val<=root->val){            if(root->left) dfs(root->left,val);            else{                root->left=new TreeNode();                root->left->val=val;            }        }        else{            if(root->right) dfs(root->right,val);            else{                root->right=new TreeNode();                root->right->val=val;            }        }    }    TreeNode* insertIntoBST(TreeNode* root, int val) {        if(!root){            root=new TreeNode();            root->val=val;        }        else dfs(root,val);        return root;    }};